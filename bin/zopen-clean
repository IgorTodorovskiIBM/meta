#!/bin/sh
# Cleanup utility for z/OS Open Tools - https://github.com/ZOSOpenTools

#
# All zopen-* scripts MUST start with this code to maintain consistency
#
## things
setupMyself() {
	ME=$(basename $0)
	MYDIR="$(cd "$(dirname "$0")" >/dev/null 2>&1 && pwd -P)"
	INCDIR="${MYDIR}/../include"
	if ! [ -d "${INCDIR}" ] && ! [ -f "${INCDIR}/common.sh" ]; then
		echo "Internal Error. Unable to find common.sh file to source" >&2
		exit 8
	fi
	. "${INCDIR}/common.sh"
}
setupMyself
checkWritable

printHelp() {
	cat <<HELPDOC
zopen clean is a utility for z/OS Open Tools to clean uneeded resources
from the system to save space and prevent clutter

Usage: zopen clean [OPTION] [PACKAGE]

Options:
  -c, --cache       cleans the downloaded package cache; packages will be re-downloaded if needed
  -d, --dangling    removes dangling symlinks from the zopen file system in case of issues during
                    package maintenance
  -u, --unused [PACKAGE]     
                    remove versions of PACKAGE that are available as alternatives, leaving only the 
                    currently active version
  -v, --verbose     run in verbose mode
  -h,-?, --help     display this help and exit
  --version         print version

Examples:
  zopen clean -c    clear the package download cache
  zopen clean -d    analyse the zopen file system and remove any dangling symlinks
  zopen clean -u [PACKAGE]
                    remove unused versions for PACKAGE

Report bugs at https://github.com/ZOSOpenTools/meta/issues .

HELPDOC
}

cleanUnused() {
	needle=$1
	found=$(zosfind "$ZOPEN_PKGINSTALL" -name "*/${needle}-*" -prune -type d)
	if [ -z "$found" ]; then
		printInfo "No versions of package '${needle}' found for removal"
		return
	fi

	if isPackageActive "$needle"; then
		printVerbose "Getting the current versions directory [if any]"
		deref=$(cd "$ZOPEN_PKGINSTALL/$needle/$needle" && pwd -P)
	else
		printInfo "No currently installed version of package '${needle}'. Removing all versions"
	fi

	i=0
	current=0
	# the below would be simpler, but creates a subshell so can't get the number of entries outside!
	#  echo "$found" | xargs | tr ' ' '\n' | while read repo; do
	TMP_FIFO_PIPE="$HOME/altselect.pipe"
	[ ! -p "$TMP_FIFO_PIPE" ] || rm -f "$TMP_FIFO_PIPE"
	mkfifo "$TMP_FIFO_PIPE"
	echo "$found" | xargs | tr ' ' '\n' >>"$TMP_FIFO_PIPE" &
	while read repo; do
		printVerbose "Parsing repo: '$repo' as '${repo#$ZOPEN_PKGINSTALL/}'"
		if [ "${repo}" = "${repo#$ZOPEN_PKGINSTALL/}" ]; then
			printVerbose "Working around possible bug in FIFO that converts initial char to alert/bell 0x07/'\a'"
			if ! $(type od); then
				printVerbose "Displaying erroneous string"
				out=$(echo "${repo}" | od -cx)
				printVerbose "String details:\n '$out'"
			fi
			repo="/$(echo $repo | cut -b 2-)"
			printVerbose "Repo:='$repo'"
			syslog "$ZOPEN_LOG_PATH/audit.log" "$LOG_W" "$CAT_FILE,$CAT_SYS" "CLEAN" "cleanUnused" "FIFO character issue while reading from $TMP_FIFO_PIPE. Workaround applied"
		fi
		i=$(expr $i + 1)
		if [ "${deref#$ZOPEN_PKGINSTALL/}" = "${repo#$ZOPEN_PKGINSTALL/}" ]; then
			current=$i
			printInfo "${NC}${GREEN}$i: ${repo#$ZOPEN_PKGINSTALL/}  <-  current${NC}"
		else
			rm -rf "$repo" >/dev/null 2>&1
			printInfo "$i: ${repo#$ZOPEN_PKGINSTALL/} <- Removed"
			syslog "$ZOPEN_LOG_PATH/audit.log" "$LOG_A" "$CAT_FILE,$CAT_PACKAGE,$CAT_REMOVE" "CLEAN" "cleanUnused" "Removed unused package at ${repo#$ZOPEN_PKGINSTALL/} "
		fi
	done <"$TMP_FIFO_PIPE"
	[ ! -p "$TMP_FIFO_PIPE" ] || rm -f "$TMP_FIFO_PIPE"
	printInfo "- Removal of unused package versions complete"
}

cleanDangling() {
	printVerbose "Removing dangling symlinks from the file structure"
	# As packages can install to any subfolder of the zopen filesystem, need to traverse
	# along every path under that filesystem
	if [ "$ZOPEN_ROOTFS" = "/." ]; then
		printWarning "With zopen's root configured as '/', traversal to find dangling symlinks"
		printWarning "will occur on ALL mounted file systems, ALL sub-directories and will"
		printWarning "attempt to remove any dangling symlinks it finds, regardless of how they"
		printWarning "were created or which package/product/install mechanism was used and if "
		printWarning "the user has permission to do so (errors will be reported if not)."
		printWarning "This is due to individual packages potentially installing to any location"
		printWarning "within the zopen file structure so all locations need to be considered"
		printWarning "and analysed."
		printWarning "Are you absolutely sure you want to run this option (y/N)?"
		read absolutely </dev/tty
		if [ -n "$absolutely" ] && [ "y" = "${absolutely}" ]; then
			printInfo "- Checking for any dangling symlinks across system"
		else
			exit 4
		fi
	fi
	progressHandler "spinner" "- Dangling link removal complete" &
	ph=$!
	killph="kill -HUP $ph"
	addCleanupTrapCmd "$killph"
	flecnt=0
	zosfind "$ZOPEN_ROOTFS" -type l -exec test ! -e {} \; -print | while read sl; do
		printVerbose "Removing symlink '$sl'"
		rm -f $sl
		flecnt=$(expr $flecnt + 1)
	done
	$killph 2>/dev/null # if the timer is not running, the kill will fail
	syslog "$ZOPEN_LOG_PATH/audit.log" "$LOG_A" "$CAT_FILE" "CLEAN" "cleanDangling" "zopen system scanned for dangling symlinks; $flecnt link(s) removed"
}

cleanCache() {
	printVerbose "Cleaning $ZOPEN_ROOTFS/var/cache/zopen"
	rm -rf "$ZOPEN_ROOTFS/var/cache/zopen/*"
	syslog "$ZOPEN_LOG_PATH/audit.log" "$LOG_A" "$CAT_FILE" "CLEAN" "cleanCache" "Main cache in $ZOPEN_ROOTFS/var/cache/zopen cleaned"
	printInfo "- Cache at '$ZOPEN_ROOTFS/var/cache/zopen' cleaned"
}

# Main code start here
args=$*
verbose=false
debug=false
unused=false
dangling=false
cache=false
package=""

if [ $# -eq 0 ]; then
	printError "No option provided for cleaning"
fi
while [ $# -gt 0 ]; do
	printVerbose "Parsing option: $1"
	case "$1" in
	"-u" | "--unused")
		shift
		[ $# -lt 1 ] && printError "Missing parameter for 'clean unused' option"
		unused=true
		dangling=false
		cache=false
		package="$1"
		;;
	"-d" | "--dangling")
		unused=false
		dangling=true
		cache=false
		;;
	"-c" | "--cache")
		unused=false
		dangling=false
		cache=true
		;;
	"-h" | "--help" | "-?")
		printHelp "${args}"
		exit 0
		;;
	"--version")
		zopen --version $ME
		exit 0
		;;
	"-v" | "--verbose")
		verbose=true
		;;
	"--debug")
		verbose=true
		debug=true
		;;
	*)
		package="$1" # Use the last unrecognised parameter as the package
		;;
	esac
	shift
done

if $unused; then
	cleanUnused "$package"
fi
if $dangling; then
	cleanDangling
fi
if $cache; then
	cleanCache
fi
