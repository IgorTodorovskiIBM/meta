name: "BuildAndTest"
description: "Build and Test on z/OS"
inputs:
  repo:
    description: "Github repository of the port"
    required: false
  branch:
    description: "Github branch of the port"
    required: false
secrets:
  GITHUB_TOKEN:
    required: true
  JENKINS_USER:
    required: true
  JENKINS_API_TOKEN:
    required: true
  JENKINS_SERVER_URL:
    required: true
branding:
  icon: "terminal"
  color: "gray-dark"
runs:
  steps:
    - name: Get PR details
      uses: xt0rted/pull-request-comment-branch@v1
      id: comment-branch

    - name: Set commit status as pending
      uses: myrotvorets/set-commit-status-action@master
      with:
        sha: ${{ steps.comment-branch.outputs.head_sha }}
        token: ${{ secrets.GITHUB_TOKEN }}
        status: pending

    - name: Github API Request
      id: request
      uses: octokit/request-action@v2.1.7
      with:
        route: ${{ github.event.issue.pull_request.url }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Trigger Jenkins Job
      env:
        repo: ${{ inputs.repo }}
        branch: ${{ inputs.branch }}
      run: |
        JENKINS_JOB_URL="${{ secrets.JENKINS_SERVER_URL }}/job/Port-Build/buildWithParameters?token=jenkinstest"

        if [[ -z "${repo}" ]]; then
          repo = "${{ fromJson(steps.request.outputs.data).head.repo.ssh_clone }}"
        fi
        if [[ -z "${branch}" ]]; then
          branch = "${{ fromJson(steps.request.outputs.data).head.ref }}"
        fi

        RESPONSE=$(curl -k -X POST -s -i -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" "${JENKINS_JOB_URL}" -F PORT_GITHUB_REPO="${repo}" -F PORT_DESCRIPTION="Github CI Test of ${repo}" -F PORT_BRANCH="${branch}" )

        # Extract the build URL from the response headers
        BUILD_URL=$(echo "$RESPONSE" | grep -oP "Location: \K(.*)" | tr -d '\r')

        # Extract the build number from the BUILD_URL
        BUILD_NUMBER=$(basename "$BUILD_URL" | tr -d '/')

        # Poll the Jenkins queue API to check if the job has started
        while [ "$(curl -k -s "${{ secrets.JENKINS_SERVER_URL }}/queue/item/${BUILD_NUMBER}/api/json" -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" | jq -r '.executable.number')" == "null" ]; do
            echo "Job is waiting in the queue..."
            sleep 10
        done

        # Retrieve the build URL once the job has started
        BUILD_NUMBER=$(curl -k -s "${{ secrets.JENKINS_SERVER_URL }}/queue/item/${BUILD_NUMBER}/api/json" -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" | jq -r '.executable.number')

        # Poll the Jenkins API to check if the build has completed
        while [ "$(curl -k -s "${{ secrets.JENKINS_SERVER_URL }}/job/Port-Build/${BUILD_NUMBER}/api/json" -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" | jq -r '.building')" == "true" ]; do
            echo "Build in progress..."
            sleep 10
        done

        # Retrieve the console output of the Jenkins job
        CONSOLE_OUTPUT=$(curl -k -s "${{ secrets.JENKINS_SERVER_URL }}/job/Port-Build/${BUILD_NUMBER}/consoleText" -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}")
        echo "$CONSOLE_OUTPUT"

        if [ "$(curl -k -s "${{ secrets.JENKINS_SERVER_URL }}/job/Port-Build/${BUILD_NUMBER}/api/json" -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" | jq -r '.result')" != "SUCCESS" ]; then
          echo "Job failed..."
          exit 1
        fi
        exit 0

    - name: Set final commit status
      uses: myrotvorets/set-commit-status-action@master
      if: always()
      with:
        sha: ${{ steps.comment-branch.outputs.head_sha }}
        token: ${{ secrets.GITHUB_TOKEN }}
        status: ${{ job.status }}
